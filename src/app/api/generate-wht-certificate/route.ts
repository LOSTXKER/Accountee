// src/app/api/generate-wht-certificate/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabase/admin';
import { PDFDocument, rgb, PDFFont, PDFImage } from 'pdf-lib';
import fontkit from '@pdf-lib/fontkit';
import fs from 'fs/promises';
import path from 'path';
import { format } from 'date-fns';

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
function numberToThaiText(num: number): string {
    const ThaiNumbers = ['‡∏®‡∏π‡∏ô‡∏¢‡πå', '‡∏´‡∏ô‡∏∂‡πà‡∏á', '‡∏™‡∏≠‡∏á', '‡∏™‡∏≤‡∏°', '‡∏™‡∏µ‡πà', '‡∏´‡πâ‡∏≤', '‡∏´‡∏Å', '‡πÄ‡∏à‡πá‡∏î', '‡πÅ‡∏õ‡∏î', '‡πÄ‡∏Å‡πâ‡∏≤'];
    const ThaiUnits = ['', '‡∏™‡∏¥‡∏ö', '‡∏£‡πâ‡∏≠‡∏¢', '‡∏û‡∏±‡∏ô', '‡∏´‡∏°‡∏∑‡πà‡∏ô', '‡πÅ‡∏™‡∏ô', '‡∏•‡πâ‡∏≤‡∏ô'];

    function convertInteger(n: string): string {
        let result = '';
        const len = n.length;
        if (len === 0 || parseInt(n) === 0) return '';

        for (let i = 0; i < len; i++) {
            const digit = parseInt(n[i]);
            if (digit !== 0) {
                if (i === len - 1 && digit === 1 && len > 1) {
                    result += '‡πÄ‡∏≠‡πá‡∏î';
                } else if (i === len - 2 && digit === 2) {
                    result += '‡∏¢‡∏µ‡πà';
                } else if (i === len - 2 && digit === 1) {
                    result += '';
                } else {
                    result += ThaiNumbers[digit];
                }
                result += ThaiUnits[len - i - 1];
            }
        }
        return result;
    }

    const numStr = num.toFixed(2);
    const [integerPart, decimalPart] = numStr.split('.');

    let bahtText = convertInteger(integerPart) + '‡∏ö‡∏≤‡∏ó';

    if (decimalPart === '00' || parseInt(decimalPart) === 0) {
        return bahtText + '‡∏ñ‡πâ‡∏ß‡∏ô';
    } else {
        const satangText = convertInteger(decimalPart);
        return bahtText + satangText + '‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå';
    }
}
// --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ---

// Helper to split a string into an array of characters
const splitChars = (str: string | undefined | null): string[] => {
    if (!str) return Array(13).fill('');
    return str.split('');
};

// Helper to clean description text (remove vendor info in parentheses)
const cleanDescription = (description: string | undefined | null): string => {
    if (!description) return '';
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤: ‡∏ä‡∏∑‡πà‡∏≠) ‡∏≠‡∏≠‡∏Å
    return description.replace(/\s*\(‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤:.*?\)\s*$/g, '').trim();
};

// Helper to format number with exactly 2 decimal places
const formatCurrency = (amount: number): string => {
    return amount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
};

// ü§ñ Smart Auto-Selection Functions
const smartPndTypeSelection = (transaction: any, vendorData: any): string => {
    // ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏†.‡∏á.‡∏î. ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
    const amount = Math.abs(transaction.amount);
    const category = transaction.category?.toLowerCase() || '';
    const description = transaction.description?.toLowerCase() || '';
    
    // ‡∏†.‡∏á.‡∏î.53 - ‡∏†‡∏≤‡∏©‡∏µ‡∏´‡∏±‡∏Å ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢ (‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á ‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç)
    if (category.includes('‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô') || category.includes('‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á') || 
        description.includes('‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô') || description.includes('‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á') ||
        description.includes('‡∏ö‡∏≥‡∏ô‡∏≤‡∏ç') || description.includes('salary')) {
        return '‡∏†.‡∏á.‡∏î.1‡∏Å';
    }
    
    // ‡∏†.‡∏á.‡∏î.3 - ‡∏†‡∏≤‡∏©‡∏µ‡∏´‡∏±‡∏Å ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢ (‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ ‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏• ‡∏Ø‡∏•‡∏Ø)
    if (category.includes('‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢') || category.includes('‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•') ||
        description.includes('‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢') || description.includes('dividend') ||
        description.includes('interest')) {
        return '‡∏†.‡∏á.‡∏î.3';
    }
    
    // ‡∏†.‡∏á.‡∏î.2 - ‡∏†‡∏≤‡∏©‡∏µ‡∏´‡∏±‡∏Å ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢ (‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πà‡∏≤)
    if (category.includes('‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤') || category.includes('‡∏Ç‡∏≤‡∏¢') ||
        description.includes('‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤') || description.includes('rent') ||
        description.includes('sale')) {
        return '‡∏†.‡∏á.‡∏î.2';
    }
    
    // Default: ‡∏†.‡∏á.‡∏î.53 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    return '‡∏†.‡∏á.‡∏î.53';
};

const smartWhtCategorySelection = (transaction: any, vendorData: any): string => {
    // ‡∏Å‡∏é‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
    const category = transaction.category?.toLowerCase() || '';
    const description = transaction.description?.toLowerCase() || '';
    
    // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤
    if (category.includes('‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤') || description.includes('‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤') || 
        description.includes('rent') || category.includes('‡πÄ‡∏ä‡πà‡∏≤')) {
        return '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤';
    }
    
    // ‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏¥‡∏™‡∏£‡∏∞
    if (category.includes('‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û') || description.includes('‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û') ||
        description.includes('‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤') || description.includes('consultant') ||
        category.includes('‡∏≠‡∏¥‡∏™‡∏£‡∏∞')) {
        return '‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏¥‡∏™‡∏£‡∏∞';
    }
    
    // ‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤
    if (category.includes('‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤') || description.includes('‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤') ||
        description.includes('construction') || description.includes('contractor')) {
        return '‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤';
    }
    
    // ‡∏Ñ‡πà‡∏≤‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤
    if (category.includes('‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤') || description.includes('‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤') ||
        description.includes('advertising') || description.includes('marketing')) {
        return '‡∏Ñ‡πà‡∏≤‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤';
    }
    
    // ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á
    if (category.includes('‡∏Ç‡∏ô‡∏™‡πà‡∏á') || description.includes('‡∏Ç‡∏ô‡∏™‡πà‡∏á') ||
        description.includes('transport') || description.includes('delivery') ||
        category.includes('‡∏à‡∏±‡∏î‡∏™‡πà‡∏á')) {
        return '‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á';
    }
    
    // Default: ‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    return '‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£';
};

export async function POST(req: NextRequest) {
    try {
        console.log('üöÄ Starting WHT certificate generation with full P.N.D. support...');

        const { transactionId, vendorData, whtCategory, pndType, previewMode } = await req.json();
        
        // Validate required fields
        if (!transactionId || !vendorData) {
            return NextResponse.json({ 
                error: 'Missing required fields', 
                details: 'transactionId ‡πÅ‡∏•‡∏∞ vendorData ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏' 
            }, { status: 400 });
        }
        
        const { data: transaction, error: txError } = await supabaseAdmin.from('transactions').select('*').eq('id', transactionId).single();
        if (txError || !transaction) return NextResponse.json({ error: 'Transaction not found' }, { status: 404 });
        
        const { data: businessData, error: businessError } = await supabaseAdmin.from('businesses').select('*').eq('id', transaction.businessid).single();
        if (businessError || !businessData) return NextResponse.json({ error: 'Business not found' }, { status: 404 });
        
        // ü§ñ Smart Auto-Selection (‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
        const smartPndType = smartPndTypeSelection(transaction, vendorData);
        const smartWhtCategory = smartWhtCategorySelection(transaction, vendorData);
        
        // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        const finalPndType = pndType || smartPndType;
        const finalWhtCategory = whtCategory || smartWhtCategory;
        
        console.log(`ü§ñ Smart Selection:
          - Recommended PND: ${smartPndType} ${pndType ? '(User Override: ' + pndType + ')' : '(Auto)'}
          - Recommended WHT Category: ${smartWhtCategory} ${whtCategory ? '(User Override: ' + whtCategory + ')' : '(Auto)'}
          - Transaction Category: ${transaction.category || 'N/A'}
          - Description: ${transaction.description || 'N/A'}`);
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à
        console.log(`‚úÖ Final Selection: PND=${finalPndType}, WHT=${finalWhtCategory}`);
        
        // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô preview mode ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        if (previewMode) {
            return NextResponse.json({
                suggestions: {
                    pndType: smartPndType,
                    whtCategory: smartWhtCategory,
                    reasoning: {
                        pndType: `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å: ${transaction.category || 'N/A'} - ${transaction.description || 'N/A'}`,
                        whtCategory: `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å: ${transaction.category || 'N/A'} - ${transaction.description || 'N/A'}`
                    }
                }
            });
        }
        
        // ... (‡∏™‡πà‡∏ß‡∏ô load PDF ‡πÅ‡∏•‡∏∞ font ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
        const templatePath = path.join(process.cwd(), 'public', 'approve_wh3_081156.pdf');
        const templateBytes = await fs.readFile(templatePath);
        const pdfDoc = await PDFDocument.load(templateBytes);
        pdfDoc.registerFontkit(fontkit);
        const fontPath = path.join(process.cwd(), 'public', 'fonts', 'Sarabun-Regular.ttf');
        const fontBytes = await fs.readFile(fontPath);
        const customFont = await pdfDoc.embedFont(fontBytes);

        // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å
        const checkmarkPath = path.join(process.cwd(), 'public', '123235.png');
        const checkmarkBytes = await fs.readFile(checkmarkPath);
        const checkmarkImage = await pdfDoc.embedPng(checkmarkBytes);
        console.log('‚úÖ Checkmark image loaded successfully');

        // ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        let signatureImage: PDFImage | null = null;
        if (businessData.signature_url) {
            try {
                console.log('üñãÔ∏è Loading signature from:', businessData.signature_url);
                const signatureResponse = await fetch(businessData.signature_url);
                if (signatureResponse.ok) {
                    const signatureBytes = await signatureResponse.arrayBuffer();
                    const uint8Array = new Uint8Array(signatureBytes);
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å URL ‡∏´‡∏£‡∏∑‡∏≠ content-type
                    const contentType = signatureResponse.headers.get('content-type');
                    if (contentType?.includes('png') || businessData.signature_url.toLowerCase().includes('.png')) {
                        signatureImage = await pdfDoc.embedPng(uint8Array);
                    } else {
                        signatureImage = await pdfDoc.embedJpg(uint8Array);
                    }
                    console.log('‚úÖ Signature image loaded successfully');
                } else {
                    console.log('‚ö†Ô∏è Could not load signature image:', signatureResponse.status);
                }
            } catch (error) {
                console.log('‚ö†Ô∏è Error loading signature:', error);
            }
        } else {
            console.log('üìù No signature URL provided');
        }

        const page = pdfDoc.getPages()[0];
        const { height } = page.getSize();
        const FONT_SIZE = 9; // Default font size
        const FONT_COLOR = rgb(0, 0, 0);

        const drawText = (text: string, x: number, y: number, size = FONT_SIZE) => {
            page.drawText(text, { x, y: height - y, font: customFont, size, color: FONT_COLOR });
        };
        const drawTextRightAligned = (text: string, rightX: number, y: number, size = FONT_SIZE) => {
            const textWidth = customFont.widthOfTextAtSize(text, size);
            const x = rightX - textWidth;
            page.drawText(text, { x, y: height - y, font: customFont, size, color: FONT_COLOR });
        };
        
        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å
        const drawCheckmark = (x: number, y: number, size = 12) => {
            page.drawImage(checkmarkImage, {
                x: x,
                y: height - y - size, // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á y ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡∏õ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                width: size,
                height: size,
            });
        };

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
        const drawSignature = (x: number, y: number, width = 60, maxHeight = 30) => {
            if (signatureImage) {
                // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
                const { width: imgWidth, height: imgHeight } = signatureImage.scale(1);
                const aspectRatio = imgWidth / imgHeight;
                
                let finalWidth = width;
                let finalHeight = width / aspectRatio;
                
                // ‡∏ñ‡πâ‡∏≤‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
                if (finalHeight > maxHeight) {
                    finalHeight = maxHeight;
                    finalWidth = maxHeight * aspectRatio;
                }
                
                page.drawImage(signatureImage, {
                    x: x,
                    y: height - y - finalHeight,
                    width: finalWidth,
                    height: finalHeight,
                });
                console.log(`üñãÔ∏è Signature placed at (${x}, ${y}) size: ${finalWidth}x${finalHeight}`);
            }
        };

        // 3. Draw all data onto the template
        
        // --- ‚ú® LOGIC ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡πä‡∏Å‡∏ä‡πà‡∏≠‡∏á ‡∏†.‡∏á.‡∏î. (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß) ---
        // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà" ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á checkbox ‡∏ó‡∏±‡πâ‡∏á 7 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
        const pndMap: { [key: string]: { x: number, y: number } } = {
            '‡∏†.‡∏á.‡∏î.1‡∏Å':       { x: 210, y: 225 },
            '‡∏†.‡∏á.‡∏î.1‡∏Å ‡∏û‡∏¥‡πÄ‡∏®‡∏©': { x: 288, y: 225 },
            '‡∏†.‡∏á.‡∏î.2':         { x: 396, y: 225 },
            '‡∏†.‡∏á.‡∏î.3':         { x: 473, y: 225 },
            '‡∏†.‡∏á.‡∏î.53':        { x: 396, y: 244 },
            '‡∏†.‡∏á.‡∏î.2‡∏Å':        { x: 210, y: 244 },
            '‡∏†.‡∏á.‡∏î.3‡∏Å':        { x: 288, y: 244 },
        };

        // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ pnd_type ‡∏à‡∏≤‡∏Å Smart Selection
        console.log(`üìã PND Type selected: ${finalPndType}`);
        
        const pndCoords = pndMap[finalPndType];
        if (pndCoords) {
            // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏ï‡∏¥‡πä‡∏Å‡∏ñ‡∏π‡∏Å‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå 123235.png ‡πÅ‡∏ó‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            drawCheckmark(pndCoords.x, pndCoords.y, 14);
            console.log(`‚úÖ PND checkbox marked with image at position (${pndCoords.x}, ${pndCoords.y})`);
        } else {
            console.warn(`‚ö†Ô∏è  Invalid PND type: ${finalPndType}`);
        }
        // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î LOGIC ‡πÉ‡∏´‡∏°‡πà ---
        
        // --- ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏Å‡∏ô X ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ 13 ‡∏´‡∏•‡∏±‡∏Å ---
        const taxId_X_Positions = [
            378, 396, 408, 420, 432, 450, 462, 474, 486, 498, 517, 529, 548
        ];
        // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ ---

        // Payer Info (‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ)
        drawText(businessData.businessname || '', 70, 111);
        drawText(businessData.company_address || '', 70, 134, 8);
        const businessTaxIdChars = splitChars(businessData.tax_id);
        businessTaxIdChars.forEach((char, i) => {
            if (taxId_X_Positions[i]) {
                drawText(char, taxId_X_Positions[i], 94);
            }
        });

        // Payee Info (‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ)
        drawText(vendorData.name, 70, 183);
        drawText(vendorData.address || '', 70, 210, 8);
        const vendorTaxIdChars = splitChars(vendorData.taxId);
        vendorTaxIdChars.forEach((char, i) => {
            if (taxId_X_Positions[i]) {
                drawText(char, taxId_X_Positions[i], 163);
            }
        });
        
        // Financial Details Table
        const issueDate = new Date(transaction.date);
        const totalAmount = transaction.subtotal || 0;
        const withholdingAmount = transaction.withholdingtax || 0;
        
        // ‡πÉ‡∏ä‡πâ whtCategory ‡∏à‡∏≤‡∏Å Smart Selection
        console.log(`üí∞ WHT Category selected from Smart System: ${finalWhtCategory}`);

        const categoryMap: { [key: string]: { type: 'simple' | 'text_5' | 'text_6', y: number } } = {
            '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á':         { type: 'simple', y: 303 },
            '‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° ‡∏Ñ‡πà‡∏≤‡∏ô‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤':   { type: 'simple', y: 317 },
            '‡∏Ñ‡πà‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå':        { type: 'simple', y: 331 },
            '‡∏Ñ‡πà‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢':             { type: 'simple', y: 346 },
            '‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•':              { type: 'simple', y: 360 },
            '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤':                 { type: 'text_5', y: 563 },
            '‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏¥‡∏™‡∏£‡∏∞':        { type: 'text_5', y: 563 },
            '‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤':             { type: 'text_5', y: 563 },
            '‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£':               { type: 'text_5', y: 563 },
            '‡∏Ñ‡πà‡∏≤‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤':               { type: 'text_5', y: 563 },
            '‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á':               { type: 'simple', y: 621 },
            '‡∏≠‡∏∑‡πà‡∏ô‡πÜ':                   { type: 'text_6', y: 638 },
        };

        const selectedCategory = categoryMap[finalWhtCategory] || categoryMap['‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'];
        const dataY = selectedCategory.y + 4;

        // ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡πä‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏û‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢ (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        console.log(`üí∞ WHT Category selected: ${finalWhtCategory} - ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡πä‡∏Å‡∏ä‡πà‡∏≠‡∏á`);

        if (selectedCategory.type === 'text_5') {
            const cleanedDescription = cleanDescription(transaction.description);
            const categoryText = cleanedDescription 
                ? `${finalWhtCategory} (${cleanedDescription})`
                : finalWhtCategory;
            drawText(categoryText, 159, 568);
        } else if (selectedCategory.type === 'text_6') {
            const cleanedDescription = cleanDescription(transaction.description);
            const categoryText = cleanedDescription 
                ? `${finalWhtCategory} (${cleanedDescription})`
                : finalWhtCategory;
            drawText(categoryText, 107, 585); // ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å 641 ‡πÄ‡∏õ‡πá‡∏ô 585 ‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏±‡∏ö text_5 ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        }
        
        drawText(format(issueDate, 'dd/MM/yy'), 350, dataY);
        drawTextRightAligned(formatCurrency(totalAmount), 488, dataY);
        drawTextRightAligned(formatCurrency(withholdingAmount), 559, dataY);

        // Totals
        drawTextRightAligned(formatCurrency(totalAmount), 488, 660);
        drawTextRightAligned(formatCurrency(withholdingAmount), 559, 660);
        const amountInWords = numberToThaiText(withholdingAmount);
        drawText(amountInWords, 204, 681);

        // Final Checkboxes - ‡∏ï‡∏¥‡πä‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á "‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        console.log('üìã Marking checkbox: ‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡∏ï‡∏¥‡πä‡∏Å "‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß")');
        drawCheckmark(82, 707, 16);   // ‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢
        // ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡πä‡∏Å‡∏ä‡πà‡∏≠‡∏á "‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß" ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        console.log('‚úÖ ‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢ checkbox marked successfully');
        
        // Signature and Date
        drawText(format(issueDate, 'dd'), 345, 765);
        drawText(format(issueDate, 'MM'), 394, 765);
        drawText(format(issueDate, 'yyyy'), 445, 765);

        // üñãÔ∏è Digital Signature - ‡∏ß‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        if (signatureImage) {
            drawSignature(380, 730, 45, 45); // ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            console.log('üñãÔ∏è Digital signature added to WHT certificate');
        }

        // 4. Save and Upload
        const pdfResultBytes = await pdfDoc.save();
        const fileName = `${transaction.businessid}/wht_certificates/${transactionId}_${Date.now()}.pdf`;
        const { error: uploadError } = await supabaseAdmin.storage.from('wht_certificates').upload(fileName, pdfResultBytes, { contentType: 'application/pdf', upsert: true });
        if (uploadError) throw new Error(`Supabase Storage Error: ${uploadError.message}`);

        const { data: urlData } = supabaseAdmin.storage.from('wht_certificates').getPublicUrl(fileName);
        const attachment = { name: `WHT Certificate - ${vendorData.name}.pdf`, url: urlData.publicUrl, type: 'application/pdf' };
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: attachment, wht_category, pnd_type ‡πÅ‡∏•‡∏∞ status
        await supabaseAdmin.from('transactions').update({ 
            wht_certificate_attachment: attachment,
            wht_category: finalWhtCategory,
            pnd_type: finalPndType,
            status: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå' 
        }).eq('id', transactionId);

        console.log('‚úÖ WHT certificate generated on official template and URL saved successfully.');
        console.log('üìã Certificate Summary:');
        console.log(`   - PND Type: ${finalPndType}`);
        console.log(`   - WHT Category: ${finalWhtCategory}`);
        console.log(`   - Vendor: ${vendorData.name}`);
        console.log(`   - Amount: ${totalAmount.toLocaleString('th-TH', { minimumFractionDigits: 2 })}`);
        console.log(`   - Withholding Tax: ${withholdingAmount.toLocaleString('th-TH', { minimumFractionDigits: 2 })}`);
        
        return NextResponse.json({ 
            success: true, 
            url: urlData.publicUrl,
            message: '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏´‡∏±‡∏Å ‡∏ì ‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            attachment: attachment,
            fileName: `WHT Certificate - ${vendorData.name}.pdf`,
            pndType: finalPndType,
            whtCategory: finalWhtCategory
        });

    } catch (error) {
        console.error('üí• OVERALL CATCH:', error);
        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
        return NextResponse.json({ error: 'Failed to generate certificate', details: errorMessage }, { status: 500 });
    }
}

