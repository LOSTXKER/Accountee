// src/app/api/generate-wht-certificate/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabase/admin';
import { PDFDocument, rgb, PDFFont } from 'pdf-lib';
import fontkit from '@pdf-lib/fontkit';
import fs from 'fs/promises';
import path from 'path';
import { format } from 'date-fns';

// --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ---
function numberToThaiText(num: number): string {
    const ThaiNumbers = ['‡∏®‡∏π‡∏ô‡∏¢‡πå', '‡∏´‡∏ô‡∏∂‡πà‡∏á', '‡∏™‡∏≠‡∏á', '‡∏™‡∏≤‡∏°', '‡∏™‡∏µ‡πà', '‡∏´‡πâ‡∏≤', '‡∏´‡∏Å', '‡πÄ‡∏à‡πá‡∏î', '‡πÅ‡∏õ‡∏î', '‡πÄ‡∏Å‡πâ‡∏≤'];
    const ThaiUnits = ['', '‡∏™‡∏¥‡∏ö', '‡∏£‡πâ‡∏≠‡∏¢', '‡∏û‡∏±‡∏ô', '‡∏´‡∏°‡∏∑‡πà‡∏ô', '‡πÅ‡∏™‡∏ô', '‡∏•‡πâ‡∏≤‡∏ô'];

    function convertInteger(n: string): string {
        let result = '';
        const len = n.length;
        if (len === 0 || parseInt(n) === 0) return '';

        for (let i = 0; i < len; i++) {
            const digit = parseInt(n[i]);
            if (digit !== 0) {
                if (i === len - 1 && digit === 1 && len > 1) {
                    result += '‡πÄ‡∏≠‡πá‡∏î';
                } else if (i === len - 2 && digit === 2) {
                    result += '‡∏¢‡∏µ‡πà';
                } else if (i === len - 2 && digit === 1) {
                    result += '';
                } else {
                    result += ThaiNumbers[digit];
                }
                result += ThaiUnits[len - i - 1];
            }
        }
        return result;
    }

    const numStr = num.toFixed(2);
    const [integerPart, decimalPart] = numStr.split('.');

    let bahtText = convertInteger(integerPart) + '‡∏ö‡∏≤‡∏ó';

    if (decimalPart === '00' || parseInt(decimalPart) === 0) {
        return bahtText + '‡∏ñ‡πâ‡∏ß‡∏ô';
    } else {
        const satangText = convertInteger(decimalPart);
        return bahtText + satangText + '‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå';
    }
}
// --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô ---

// Helper to split a string into an array of characters
const splitChars = (str: string | undefined | null): string[] => {
    if (!str) return Array(13).fill('');
    return str.split('');
};

export async function POST(req: NextRequest) {
    try {
        console.log('üöÄ Starting WHT certificate generation with full P.N.D. support...');

        const { transactionId, vendorData, whtCategory, pndType } = await req.json();
        
        // Validate required fields
        if (!transactionId || !vendorData) {
            return NextResponse.json({ 
                error: 'Missing required fields', 
                details: 'transactionId ‡πÅ‡∏•‡∏∞ vendorData ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏' 
            }, { status: 400 });
        }
        const { data: transaction, error: txError } = await supabaseAdmin.from('transactions').select('*').eq('id', transactionId).single();
        if (txError || !transaction) return NextResponse.json({ error: 'Transaction not found' }, { status: 404 });
        const { data: businessData, error: businessError } = await supabaseAdmin.from('businesses').select('*').eq('id', transaction.businessid).single();
        if (businessError || !businessData) return NextResponse.json({ error: 'Business not found' }, { status: 404 });
        
        // ... (‡∏™‡πà‡∏ß‡∏ô load PDF ‡πÅ‡∏•‡∏∞ font ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
        const templatePath = path.join(process.cwd(), 'public', 'approve_wh3_081156.pdf');
        const templateBytes = await fs.readFile(templatePath);
        const pdfDoc = await PDFDocument.load(templateBytes);
        pdfDoc.registerFontkit(fontkit);
        const fontPath = path.join(process.cwd(), 'public', 'fonts', 'Sarabun-Regular.ttf');
        const fontBytes = await fs.readFile(fontPath);
        const customFont = await pdfDoc.embedFont(fontBytes);

        const page = pdfDoc.getPages()[0];
        const { height } = page.getSize();
        const FONT_SIZE = 10; // Default font size
        const FONT_COLOR = rgb(0, 0, 0);

        const drawText = (text: string, x: number, y: number, size = FONT_SIZE) => {
            page.drawText(text, { x, y: height - y, font: customFont, size, color: FONT_COLOR });
        };
        const drawTextRightAligned = (text: string, rightX: number, y: number, size = FONT_SIZE) => {
            const textWidth = customFont.widthOfTextAtSize(text, size);
            const x = rightX - textWidth;
            page.drawText(text, { x, y: height - y, font: customFont, size, color: FONT_COLOR });
        };

        // 3. Draw all data onto the template
        
        // --- ‚ú® LOGIC ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡πä‡∏Å‡∏ä‡πà‡∏≠‡∏á ‡∏†.‡∏á.‡∏î. ---
        // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ "‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà" ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á checkbox ‡∏ó‡∏±‡πâ‡∏á 7 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ x, y ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        const pndMap: { [key: string]: { x: number, y: number } } = {
            '‡∏†.‡∏á.‡∏î.1‡∏Å':       { x: 380, y: 250 },
            '‡∏†.‡∏á.‡∏î.1‡∏Å ‡∏û‡∏¥‡πÄ‡∏®‡∏©': { x: 480, y: 250 },
            '‡∏†.‡∏á.‡∏î.2':         { x: 380, y: 264 },
            '‡∏†.‡∏á.‡∏î.3':         { x: 480, y: 264 },
            '‡∏†.‡∏á.‡∏î.53':        { x: 380, y: 278 },
            '‡∏†.‡∏á.‡∏î.2‡∏Å':        { x: 480, y: 278 },
            '‡∏†.‡∏á.‡∏î.3‡∏Å':        { x: 380, y: 292 },
        };

        // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ pnd_type ‡∏à‡∏≤‡∏Å request ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const finalPndType = pndType || '‡∏†.‡∏á.‡∏î.53';
        const pndCoords = pndMap[finalPndType];
        if (pndCoords) {
            drawText('‚úì', pndCoords.x, pndCoords.y, 14);
        }
        // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î LOGIC ‡πÉ‡∏´‡∏°‡πà ---
        
        // --- ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏Å‡∏ô X ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ 13 ‡∏´‡∏•‡∏±‡∏Å ---
        const taxId_X_Positions = [
            381, 397, 413, 429, 445, 461, 477, 493, 509, 525, 541, 557, 573
        ];
        // --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ ---

        // Payer Info (‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ)
        drawText(businessData.businessname || '', 70, 111);
        drawText(businessData.company_address || '', 70, 134, 8);
        const businessTaxIdChars = splitChars(businessData.tax_id);
        businessTaxIdChars.forEach((char, i) => {
            if (taxId_X_Positions[i]) {
                drawText(char, taxId_X_Positions[i], 91);
            }
        });

        // Payee Info (‡∏ú‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏´‡∏±‡∏Å‡∏†‡∏≤‡∏©‡∏µ)
        drawText(vendorData.name, 70, 183);
        drawText(vendorData.address || '', 70, 210, 8);
        const vendorTaxIdChars = splitChars(vendorData.taxId);
        vendorTaxIdChars.forEach((char, i) => {
            if (taxId_X_Positions[i]) {
                drawText(char, taxId_X_Positions[i], 160);
            }
        });
        
        // Financial Details Table
        const issueDate = new Date(transaction.date);
        const totalAmount = transaction.subtotal || 0;
        const withholdingAmount = transaction.withholdingtax || 0;
        
        // ‡πÉ‡∏ä‡πâ whtCategory ‡∏à‡∏≤‡∏Å request ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        const finalWhtCategory = whtCategory || '‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£';

        const categoryMap: { [key: string]: { type: 'simple' | 'text_5' | 'text_6', y: number } } = {
            '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á':         { type: 'simple', y: 303 },
            '‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° ‡∏Ñ‡πà‡∏≤‡∏ô‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤':   { type: 'simple', y: 317 },
            '‡∏Ñ‡πà‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå':        { type: 'simple', y: 331 },
            '‡∏Ñ‡πà‡∏≤‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢':             { type: 'simple', y: 346 },
            '‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•':              { type: 'simple', y: 360 },
            '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤':                 { type: 'text_5', y: 563 },
            '‡∏Ñ‡πà‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏ä‡∏µ‡∏û‡∏≠‡∏¥‡∏™‡∏£‡∏∞':        { type: 'text_5', y: 563 },
            '‡∏Ñ‡πà‡∏≤‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏°‡∏≤':             { type: 'text_5', y: 563 },
            '‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£':               { type: 'text_5', y: 563 },
            '‡∏Ñ‡πà‡∏≤‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤':               { type: 'text_5', y: 563 },
            '‡∏Ñ‡πà‡∏≤‡∏Ç‡∏ô‡∏™‡πà‡∏á':               { type: 'simple', y: 621 },
            '‡∏≠‡∏∑‡πà‡∏ô‡πÜ':                   { type: 'text_6', y: 638 },
        };

        const selectedCategory = categoryMap[finalWhtCategory] || categoryMap['‡∏Ñ‡πà‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'];
        const dataY = selectedCategory.y + 4;

        drawText('‚úì', 35, selectedCategory.y, 14);

        if (selectedCategory.type === 'text_5') {
            drawText(`${finalWhtCategory} (${transaction.description || ''})`, 159, 565);
        } else if (selectedCategory.type === 'text_6') {
            drawText(`${finalWhtCategory} (${transaction.description || ''})`, 107, 638);
        }
        
        drawText(format(issueDate, 'dd/MM/yy'), 350, dataY);
        drawTextRightAligned(totalAmount.toLocaleString('th-TH', { minimumFractionDigits: 2 }), 488, dataY);
        drawTextRightAligned(withholdingAmount.toLocaleString('th-TH', { minimumFractionDigits: 2 }), 559, dataY);

        // Totals
        drawTextRightAligned(totalAmount.toLocaleString('th-TH', { minimumFractionDigits: 2 }), 488, 660);
        drawTextRightAligned(withholdingAmount.toLocaleString('th-TH', { minimumFractionDigits: 2 }), 559, 660);
        const amountInWords = numberToThaiText(withholdingAmount);
        drawText(amountInWords, 204, 681);

        // Final Checkboxes
        drawText('‚úì', 82, 721, 17);
        drawText('‚úì', 283, 721, 17);
        
        // Signature and Date
        drawText(format(issueDate, 'dd'), 345, 765);
        drawText(format(issueDate, 'MM'), 394, 765);
        drawText(format(issueDate, 'yyyy'), 445, 765);

        // 4. Save and Upload
        const pdfResultBytes = await pdfDoc.save();
        const fileName = `${transaction.businessid}/wht_certificates/${transactionId}_${Date.now()}.pdf`;
        const { error: uploadError } = await supabaseAdmin.storage.from('wht_certificates').upload(fileName, pdfResultBytes, { contentType: 'application/pdf', upsert: true });
        if (uploadError) throw new Error(`Supabase Storage Error: ${uploadError.message}`);

        const { data: urlData } = supabaseAdmin.storage.from('wht_certificates').getPublicUrl(fileName);
        const attachment = { name: `WHT Certificate - ${vendorData.name}.pdf`, url: urlData.publicUrl, type: 'application/pdf' };
        
        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: attachment, wht_category, pnd_type ‡πÅ‡∏•‡∏∞ status
        await supabaseAdmin.from('transactions').update({ 
            wht_certificate_attachment: attachment,
            wht_category: finalWhtCategory,
            pnd_type: finalPndType,
            status: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå' 
        }).eq('id', transactionId);

        console.log('‚úÖ WHT certificate generated on official template and URL saved successfully.');
        return NextResponse.json({ success: true, url: urlData.publicUrl });

    } catch (error) {
        console.error('üí• OVERALL CATCH:', error);
        const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
        return NextResponse.json({ error: 'Failed to generate certificate', details: errorMessage }, { status: 500 });
    }
}

