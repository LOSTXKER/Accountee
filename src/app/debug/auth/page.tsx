// src/app/debug/auth/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { createClient } from '@/lib/supabase/client';

export default function AuthDebugPage() {
    const [email, setEmail] = useState('');
    const [result, setResult] = useState<any>(null);
    const [loading, setLoading] = useState(false);
    const [currentUrl, setCurrentUrl] = useState('');
    
    const supabase = createClient();

    // ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ hydration error
    useEffect(() => {
        setCurrentUrl(window.location.origin);
    }, []);

    const testSignup = async () => {
        if (!email) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
            return;
        }
        
        setLoading(true);
        setResult(null);
        
        try {
            console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•:', email);
            
            // ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ emailRedirectTo ‡∏Å‡πà‡∏≠‡∏ô
            const { data, error } = await supabase.auth.signUp({
                email,
                password: 'test123456'
            });
            
            console.log('‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Supabase:', { data, error });
            
            setResult({
                success: !error,
                data: data,
                error: error?.message,
                timestamp: new Date().toLocaleString('th-TH'),
                supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,
                note: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà redirect URL'
            });
        } catch (err: any) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
            setResult({
                success: false,
                error: err.message,
                timestamp: new Date().toLocaleString('th-TH')
            });
        } finally {
            setLoading(false);
        }
    };

    const testSignupWithRedirect = async () => {
        if (!email) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
            return;
        }
        
        setLoading(true);
        setResult(null);
        
        try {
            console.log('‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏µ redirect:', email);
            
            // ‡πÉ‡∏ä‡πâ production URL ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô production environment
            const redirectUrl = process.env.NODE_ENV === 'production' 
                ? 'https://accountee.vercel.app/auth/callback'
                : `${currentUrl}/auth/callback`;
            
            const { data, error } = await supabase.auth.signUp({
                email,
                password: 'test123456',
                options: {
                    emailRedirectTo: redirectUrl
                }
            });
            
            console.log('‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Supabase with redirect:', { data, error });
            
            setResult({
                success: !error,
                data: data,
                error: error?.message,
                timestamp: new Date().toLocaleString('th-TH'),
                supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,
                redirectUrl: redirectUrl,
                note: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏°‡∏µ redirect URL (auto-detect environment)'
            });
        } catch (err: any) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err);
            setResult({
                success: false,
                error: err.message,
                timestamp: new Date().toLocaleString('th-TH')
            });
        } finally {
            setLoading(false);
        }
    };

    const checkEmailSettings = async () => {
        setLoading(true);
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ auth
            const { data: authSettings } = await supabase.auth.getSession();
            
            // ‡∏•‡∏≠‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• reset password ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö email service
            const testEmail = 'test-email-send@example.com';
            const { data, error } = await supabase.auth.resetPasswordForEmail(testEmail);
            
            console.log('Email test result:', { data, error });
            
            setResult({
                success: true,
                emailTest: {
                    testSent: !error,
                    error: error?.message,
                    data: data
                },
                recommendation: error ? 
                    'Email service ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SMTP settings ‡πÉ‡∏ô Supabase' :
                    'Email service ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ - ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏≤‡∏à‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á email ‡∏Ç‡∏≠‡∏á provider',
                timestamp: new Date().toLocaleString('th-TH')
            });
        } catch (err: any) {
            setResult({
                success: false,
                error: `Email settings error: ${err.message}`,
                timestamp: new Date().toLocaleString('th-TH')
            });
        } finally {
            setLoading(false);
        }
    };

    const resendConfirmation = async () => {
        if (!email) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡πà‡∏≠‡∏ô');
            return;
        }
        
        setLoading(true);
        try {
            // ‡πÉ‡∏ä‡πâ production URL ‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô production environment
            const redirectUrl = process.env.NODE_ENV === 'production' 
                ? 'https://accountee.vercel.app/auth/callback'
                : `${currentUrl}/auth/callback`;
                
            const { error } = await supabase.auth.resend({
                type: 'signup',
                email: email,
                options: {
                    emailRedirectTo: redirectUrl
                }
            });
            
            if (error) {
                alert(`‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
            } else {
                alert(`‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏• (Redirect: ${redirectUrl})`);
            }
        } catch (err: any) {
            alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`);
        } finally {
            setLoading(false);
        }
    };

    const checkAuthConfig = async () => {
        try {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Supabase
            const { data, error } = await supabase.auth.getSession();
            console.log('=== ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Supabase ===');
            console.log('Supabase URL:', process.env.NEXT_PUBLIC_SUPABASE_URL);
            console.log('Supabase Key Available:', !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
            console.log('Auth Session:', data);
            if (error) console.log('Auth Error:', error);
            
            setResult({
                success: true,
                configCheck: {
                    supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL,
                    hasAnonKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
                    session: data,
                    error: error?.message
                },
                timestamp: new Date().toLocaleString('th-TH')
            });
        } catch (err: any) {
            console.log('Config Error:', err);
            setResult({
                success: false,
                error: `Config Error: ${err.message}`,
                timestamp: new Date().toLocaleString('th-TH')
            });
        }
    };

    return (
        <div className="max-w-2xl mx-auto p-8 space-y-6">
            <h1 className="text-2xl font-bold">üîß Auth Debug Tool</h1>
            
            <div className="space-y-4">
                <div>
                    <label className="block text-sm font-medium mb-2">‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</label>
                    <input
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        className="w-full px-3 py-2 border rounded-lg"
                        placeholder="test@example.com"
                    />
                </div>

                <div className="flex gap-4 flex-wrap">
                    <button
                        onClick={testSignup}
                        disabled={!email || loading}
                        className="px-4 py-2 bg-blue-600 text-white rounded-lg disabled:bg-gray-400 hover:bg-blue-700"
                    >
                        {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...' : '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤'}
                    </button>

                    <button
                        onClick={testSignupWithRedirect}
                        disabled={!email || loading}
                        className="px-4 py-2 bg-purple-600 text-white rounded-lg disabled:bg-gray-400 hover:bg-purple-700"
                    >
                        {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...' : '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏°‡∏µ Redirect'}
                    </button>
                    
                    <button
                        onClick={checkAuthConfig}
                        className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                    >
                        ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                    </button>

                    <button
                        onClick={checkEmailSettings}
                        disabled={loading}
                        className="px-4 py-2 bg-indigo-600 text-white rounded-lg disabled:bg-gray-400 hover:bg-indigo-700"
                    >
                        ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Email Service
                    </button>

                    <button
                        onClick={resendConfirmation}
                        disabled={!email || loading}
                        className="px-4 py-2 bg-orange-600 text-white rounded-lg disabled:bg-gray-400 hover:bg-orange-700"
                    >
                        ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
                    </button>
                </div>

                {/* ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Environment ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ */}
                <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <h4 className="font-semibold text-blue-800 mb-2">üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Environment:</h4>
                    <div className="text-sm space-y-1">
                        <div>Supabase URL: <span className="font-mono text-blue-700">{process.env.NEXT_PUBLIC_SUPABASE_URL || '‡πÑ‡∏°‡πà‡∏û‡∏ö'}</span></div>
                        <div>Anon Key: <span className="font-mono text-blue-700">{process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ? '‡∏°‡∏µ' : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}</span></div>
                        <div>Current URL: <span className="font-mono text-blue-700">{currentUrl || '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...'}</span></div>
                    </div>
                </div>
            </div>

            {result && (
                <div className="mt-6 p-4 bg-gray-100 rounded-lg">
                    <h3 className="font-bold mb-2">‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:</h3>
                    <pre className="text-sm overflow-auto">
                        {JSON.stringify(result, null, 2)}
                    </pre>
                </div>
            )}

            <div className="mt-8 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <h3 className="font-bold text-yellow-800 mb-2">üìã ‡πÄ‡∏ä‡πá‡∏Ñ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤:</h3>
                <ul className="text-sm text-yellow-700 space-y-1">
                    <li>1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Environment Variables ‡πÉ‡∏ô .env.local</li>
                    <li>2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Site URL ‡πÉ‡∏ô Supabase Dashboard</li>
                    <li>3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Email Templates ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô Authentication</li>
                    <li>4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Spam folder ‡πÉ‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•</li>
                    <li>5. ‡∏£‡∏≠ 5-10 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏°‡∏≤‡∏ä‡πâ‡∏≤</li>
                    <li>6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Network tab ‡πÉ‡∏ô Browser DevTools</li>
                </ul>
            </div>

            <div className="mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">
                <h3 className="font-bold text-red-800 mb-2">üö® ‡∏´‡∏≤‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡πà‡∏á - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</h3>
                <div className="text-sm text-red-700 space-y-3">
                    <div>
                        <p className="font-semibold">1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô Supabase Dashboard:</p>
                        <ul className="list-disc list-inside ml-4 space-y-1">
                            <li>Authentication ‚Üí Settings ‚Üí Email Templates</li>
                            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "Confirm signup" template ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà</li>
                            <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ SMTP settings ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà</li>
                        </ul>
                    </div>
                    
                    <div>
                        <p className="font-semibold">2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Auth Settings:</p>
                        <ul className="list-disc list-inside ml-4 space-y-1">
                            <li>Authentication ‚Üí Settings ‚Üí Site URL: http://localhost:3002</li>
                            <li>Redirect URLs: http://localhost:3002/**, *.vercel.app/**</li>
                            <li>Enable email confirmations: ‡πÄ‡∏õ‡∏¥‡∏î</li>
                        </ul>
                    </div>

                    <div>
                        <p className="font-semibold">3. ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô:</p>
                        <ul className="list-disc list-inside ml-4 space-y-1">
                            <li>‡∏•‡∏≠‡∏á Gmail ‡πÅ‡∏ó‡∏ô Hotmail</li>
                            <li>‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡πÄ‡∏ä‡πà‡∏ô 10minutemail.com</li>
                        </ul>
                    </div>
                </div>
            </div>

            {result?.success && result?.data?.user && (
                <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                    <h3 className="font-bold text-green-800 mb-2">‚úÖ ‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>
                    <div className="text-sm text-green-700 space-y-2">
                        <p><strong>User ID:</strong> {result.data.user.id}</p>
                        <p><strong>Email:</strong> {result.data.user.email}</p>
                        <p><strong>Confirmation Sent:</strong> {new Date(result.data.user.confirmation_sent_at).toLocaleString('th-TH')}</p>
                        
                        <div className="mt-4 p-3 bg-white border border-green-300 rounded">
                            <h4 className="font-semibold text-green-800 mb-2">üìß ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:</h4>
                            <ol className="list-decimal list-inside space-y-1">
                                <li>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏• <strong>{result.data.user.email}</strong></li>
                                <li>‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏≤‡∏Å <code>noreply@mail.app.supabase.io</code></li>
                                <li>‡∏ï‡∏£‡∏ß‡∏à Spam/Junk folder ‡∏î‡πâ‡∏ß‡∏¢</li>
                                <li>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå confirm ‡πÉ‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•</li>
                                <li>‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏£‡∏≠ 5-10 ‡∏ô‡∏≤‡∏ó‡∏µ</li>
                            </ol>
                        </div>

                        <div className="mt-3 p-2 bg-blue-100 border border-blue-300 rounded">
                            <p className="text-blue-800 text-xs">
                                <strong>üí° Tip:</strong> ‡πÉ‡∏ô Hotmail/Outlook ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à folder "Other" ‡∏´‡∏£‡∏∑‡∏≠ "Clutter" ‡∏î‡πâ‡∏ß‡∏¢
                            </p>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}
